// Generated by CGen
#include <stdbool.h>
#include <stdio.h>
const char* vertex_pos_norm_notex_nopath_nobones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			mat4 mm (){
				return model;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_nobones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 instance_trafo = mat4(1);
				vec4 row;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_4bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_4bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_8bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_8bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_12bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_12bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_16bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_16bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_20bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_20bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_24bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_nopath_24bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_nobones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 path;
			mat4 mm (){
				mat4 combined = model;
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_nobones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 instance_trafo = mat4(1);
				vec4 row;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_4bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_4bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_8bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_8bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_12bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_12bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_16bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_16bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_20bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_20bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_24bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			uniform mat4 path;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_notex_path_24bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			uniform mat4 path;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_nobones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				return model;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_nobones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 instance_trafo = mat4(1);
				vec4 row;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_4bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_4bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_8bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_8bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_12bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_12bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_16bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_16bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_20bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_20bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_24bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_nopath_24bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_nobones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 combined = model;
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_nobones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 instance_trafo = mat4(1);
				vec4 row;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_4bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_4bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[4];
			uniform int bones;
			in vec4 bone_weight_01;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				if ((0 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				}
				if ((1 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				}
				if ((2 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				}
				if ((3 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_8bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_8bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[8];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				if ((4 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				}
				if ((5 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				}
				if ((6 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				}
				if ((7 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_12bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_12bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[12];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				if ((8 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				}
				if ((9 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				}
				if ((10 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				}
				if ((11 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_16bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_16bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[16];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				if ((12 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				}
				if ((13 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				}
				if ((14 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				}
				if ((15 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_20bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_20bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[20];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				if ((16 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				}
				if ((17 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				}
				if ((18 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				}
				if ((19 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_24bones_noinst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* vertex_pos_norm_tex_path_24bones_compact4x3inst (){
	return 
		shader{
			 #version 420 core  
			in vec3 in_pos;
			in vec3 in_norm;
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			out vec4 pos_wc;
			out vec3 norm_wc;
			uniform mat4 bone_matrices[24];
			uniform int bones;
			in vec4 bone_weight_01;
			in vec4 bone_weight_02;
			in vec4 bone_weight_03;
			in vec4 bone_weight_04;
			in vec4 bone_weight_05;
			in vec4 bone_weight_06;
			uniform mat4 path;
			in vec2 in_tc;
			out vec2 tc;
			uniform samplerBuffer instance_trafos;
			mat4 mm (){
				mat4 bone_trafo = mat4(0);
				mat4 instance_trafo = mat4(1);
				vec4 row;
				bone_trafo = (bone_trafo + (bone_matrices[0] * bone_weight_01[0]));
				bone_trafo = (bone_trafo + (bone_matrices[1] * bone_weight_01[1]));
				bone_trafo = (bone_trafo + (bone_matrices[2] * bone_weight_01[2]));
				bone_trafo = (bone_trafo + (bone_matrices[3] * bone_weight_01[3]));
				bone_trafo = (bone_trafo + (bone_matrices[4] * bone_weight_02[0]));
				bone_trafo = (bone_trafo + (bone_matrices[5] * bone_weight_02[1]));
				bone_trafo = (bone_trafo + (bone_matrices[6] * bone_weight_02[2]));
				bone_trafo = (bone_trafo + (bone_matrices[7] * bone_weight_02[3]));
				bone_trafo = (bone_trafo + (bone_matrices[8] * bone_weight_03[0]));
				bone_trafo = (bone_trafo + (bone_matrices[9] * bone_weight_03[1]));
				bone_trafo = (bone_trafo + (bone_matrices[10] * bone_weight_03[2]));
				bone_trafo = (bone_trafo + (bone_matrices[11] * bone_weight_03[3]));
				bone_trafo = (bone_trafo + (bone_matrices[12] * bone_weight_04[0]));
				bone_trafo = (bone_trafo + (bone_matrices[13] * bone_weight_04[1]));
				bone_trafo = (bone_trafo + (bone_matrices[14] * bone_weight_04[2]));
				bone_trafo = (bone_trafo + (bone_matrices[15] * bone_weight_04[3]));
				bone_trafo = (bone_trafo + (bone_matrices[16] * bone_weight_05[0]));
				bone_trafo = (bone_trafo + (bone_matrices[17] * bone_weight_05[1]));
				bone_trafo = (bone_trafo + (bone_matrices[18] * bone_weight_05[2]));
				bone_trafo = (bone_trafo + (bone_matrices[19] * bone_weight_05[3]));
				if ((20 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[20] * bone_weight_06[0]));
				}
				if ((21 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[21] * bone_weight_06[1]));
				}
				if ((22 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[22] * bone_weight_06[2]));
				}
				if ((23 < bones)){
					bone_trafo = (bone_trafo + (bone_matrices[23] * bone_weight_06[3]));
				}
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 0));
				instance_trafo[0][0] = row.x;
				instance_trafo[1][0] = row.y;
				instance_trafo[2][0] = row.z;
				instance_trafo[3][0] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 1));
				instance_trafo[0][1] = row.x;
				instance_trafo[1][1] = row.y;
				instance_trafo[2][1] = row.z;
				instance_trafo[3][1] = row.w;
				row = texelFetch(instance_trafos, ((gl_InstanceID * 3) + 2));
				instance_trafo[0][2] = row.x;
				instance_trafo[1][2] = row.y;
				instance_trafo[2][2] = row.z;
				instance_trafo[3][2] = row.w;
				mat4 combined = model;
				combined = (model * bone_trafo);
				combined = (path * combined);
				combined = (instance_trafo * combined);
				return combined;
			}

			void main (){
				mat4 modelmatrix = mm();
				tc = in_tc;
				pos_wc = (modelmatrix * vec4(in_pos, 1));
				norm_wc = (model * vec4(in_norm, 0)).xyz;
				gl_Position = (proj * view * pos_wc);
			}

		}shader;
}

const char* select_vertex_shader (bool normals, bool tex, bool path, int bones, bool instanced){
	int bone_case = (((bones / 4) * 4));
	if ((bones % 4)){
		bone_case = (bone_case + 4);
	}
	if (((tex == false) && (path == false) && (bone_case == 0) && (instanced == false))){
		return vertex_pos_norm_notex_nopath_nobones_noinst();
	}
	else{
		if (((tex == false) && (path == false) && (bone_case == 0) && (instanced == true))){
			return vertex_pos_norm_notex_nopath_nobones_compact4x3inst();
		}
		else{
			if (((tex == false) && (path == false) && (bone_case == 4) && (instanced == false))){
				return vertex_pos_norm_notex_nopath_4bones_noinst();
			}
			else{
				if (((tex == false) && (path == false) && (bone_case == 4) && (instanced == true))){
					return vertex_pos_norm_notex_nopath_4bones_compact4x3inst();
				}
				else{
					if (((tex == false) && (path == false) && (bone_case == 8) && (instanced == false))){
						return vertex_pos_norm_notex_nopath_8bones_noinst();
					}
					else{
						if (((tex == false) && (path == false) && (bone_case == 8) && (instanced == true))){
							return vertex_pos_norm_notex_nopath_8bones_compact4x3inst();
						}
						else{
							if (((tex == false) && (path == false) && (bone_case == 12) && (instanced == false))){
								return vertex_pos_norm_notex_nopath_12bones_noinst();
							}
							else{
								if (((tex == false) && (path == false) && (bone_case == 12) && (instanced == true))){
									return vertex_pos_norm_notex_nopath_12bones_compact4x3inst();
								}
								else{
									if (((tex == false) && (path == false) && (bone_case == 16) && (instanced == false))){
										return vertex_pos_norm_notex_nopath_16bones_noinst();
									}
									else{
										if (((tex == false) && (path == false) && (bone_case == 16) && (instanced == true))){
											return vertex_pos_norm_notex_nopath_16bones_compact4x3inst();
										}
										else{
											if (((tex == false) && (path == false) && (bone_case == 20) && (instanced == false))){
												return vertex_pos_norm_notex_nopath_20bones_noinst();
											}
											else{
												if (((tex == false) && (path == false) && (bone_case == 20) && (instanced == true))){
													return vertex_pos_norm_notex_nopath_20bones_compact4x3inst();
												}
												else{
													if (((tex == false) && (path == false) && (bone_case == 24) && (instanced == false))){
														return vertex_pos_norm_notex_nopath_24bones_noinst();
													}
													else{
														if (((tex == false) && (path == false) && (bone_case == 24) && (instanced == true))){
															return vertex_pos_norm_notex_nopath_24bones_compact4x3inst();
														}
														else{
															if (((tex == false) && (path == true) && (bone_case == 0) && (instanced == false))){
																return vertex_pos_norm_notex_path_nobones_noinst();
															}
															else{
																if (((tex == false) && (path == true) && (bone_case == 0) && (instanced == true))){
																	return vertex_pos_norm_notex_path_nobones_compact4x3inst();
																}
																else{
																	if (((tex == false) && (path == true) && (bone_case == 4) && (instanced == false))){
																		return vertex_pos_norm_notex_path_4bones_noinst();
																	}
																	else{
																		if (((tex == false) && (path == true) && (bone_case == 4) && (instanced == true))){
																			return vertex_pos_norm_notex_path_4bones_compact4x3inst();
																		}
																		else{
																			if (((tex == false) && (path == true) && (bone_case == 8) && (instanced == false))){
																				return vertex_pos_norm_notex_path_8bones_noinst();
																			}
																			else{
																				if (((tex == false) && (path == true) && (bone_case == 8) && (instanced == true))){
																					return vertex_pos_norm_notex_path_8bones_compact4x3inst();
																				}
																				else{
																					if (((tex == false) && (path == true) && (bone_case == 12) && (instanced == false))){
																						return vertex_pos_norm_notex_path_12bones_noinst();
																					}
																					else{
																						if (((tex == false) && (path == true) && (bone_case == 12) && (instanced == true))){
																							return vertex_pos_norm_notex_path_12bones_compact4x3inst();
																						}
																						else{
																							if (((tex == false) && (path == true) && (bone_case == 16) && (instanced == false))){
																								return vertex_pos_norm_notex_path_16bones_noinst();
																							}
																							else{
																								if (((tex == false) && (path == true) && (bone_case == 16) && (instanced == true))){
																									return vertex_pos_norm_notex_path_16bones_compact4x3inst();
																								}
																								else{
																									if (((tex == false) && (path == true) && (bone_case == 20) && (instanced == false))){
																										return vertex_pos_norm_notex_path_20bones_noinst();
																									}
																									else{
																										if (((tex == false) && (path == true) && (bone_case == 20) && (instanced == true))){
																											return vertex_pos_norm_notex_path_20bones_compact4x3inst();
																										}
																										else{
																											if (((tex == false) && (path == true) && (bone_case == 24) && (instanced == false))){
																												return vertex_pos_norm_notex_path_24bones_noinst();
																											}
																											else{
																												if (((tex == false) && (path == true) && (bone_case == 24) && (instanced == true))){
																													return vertex_pos_norm_notex_path_24bones_compact4x3inst();
																												}
																												else{
																													if (((tex == true) && (path == false) && (bone_case == 0) && (instanced == false))){
																														return vertex_pos_norm_tex_nopath_nobones_noinst();
																													}
																													else{
																														if (((tex == true) && (path == false) && (bone_case == 0) && (instanced == true))){
																															return vertex_pos_norm_tex_nopath_nobones_compact4x3inst();
																														}
																														else{
																															if (((tex == true) && (path == false) && (bone_case == 4) && (instanced == false))){
																																return vertex_pos_norm_tex_nopath_4bones_noinst();
																															}
																															else{
																																if (((tex == true) && (path == false) && (bone_case == 4) && (instanced == true))){
																																	return vertex_pos_norm_tex_nopath_4bones_compact4x3inst();
																																}
																																else{
																																	if (((tex == true) && (path == false) && (bone_case == 8) && (instanced == false))){
																																		return vertex_pos_norm_tex_nopath_8bones_noinst();
																																	}
																																	else{
																																		if (((tex == true) && (path == false) && (bone_case == 8) && (instanced == true))){
																																			return vertex_pos_norm_tex_nopath_8bones_compact4x3inst();
																																		}
																																		else{
																																			if (((tex == true) && (path == false) && (bone_case == 12) && (instanced == false))){
																																				return vertex_pos_norm_tex_nopath_12bones_noinst();
																																			}
																																			else{
																																				if (((tex == true) && (path == false) && (bone_case == 12) && (instanced == true))){
																																					return vertex_pos_norm_tex_nopath_12bones_compact4x3inst();
																																				}
																																				else{
																																					if (((tex == true) && (path == false) && (bone_case == 16) && (instanced == false))){
																																						return vertex_pos_norm_tex_nopath_16bones_noinst();
																																					}
																																					else{
																																						if (((tex == true) && (path == false) && (bone_case == 16) && (instanced == true))){
																																							return vertex_pos_norm_tex_nopath_16bones_compact4x3inst();
																																						}
																																						else{
																																							if (((tex == true) && (path == false) && (bone_case == 20) && (instanced == false))){
																																								return vertex_pos_norm_tex_nopath_20bones_noinst();
																																							}
																																							else{
																																								if (((tex == true) && (path == false) && (bone_case == 20) && (instanced == true))){
																																									return vertex_pos_norm_tex_nopath_20bones_compact4x3inst();
																																								}
																																								else{
																																									if (((tex == true) && (path == false) && (bone_case == 24) && (instanced == false))){
																																										return vertex_pos_norm_tex_nopath_24bones_noinst();
																																									}
																																									else{
																																										if (((tex == true) && (path == false) && (bone_case == 24) && (instanced == true))){
																																											return vertex_pos_norm_tex_nopath_24bones_compact4x3inst();
																																										}
																																										else{
																																											if (((tex == true) && (path == true) && (bone_case == 0) && (instanced == false))){
																																												return vertex_pos_norm_tex_path_nobones_noinst();
																																											}
																																											else{
																																												if (((tex == true) && (path == true) && (bone_case == 0) && (instanced == true))){
																																													return vertex_pos_norm_tex_path_nobones_compact4x3inst();
																																												}
																																												else{
																																													if (((tex == true) && (path == true) && (bone_case == 4) && (instanced == false))){
																																														return vertex_pos_norm_tex_path_4bones_noinst();
																																													}
																																													else{
																																														if (((tex == true) && (path == true) && (bone_case == 4) && (instanced == true))){
																																															return vertex_pos_norm_tex_path_4bones_compact4x3inst();
																																														}
																																														else{
																																															if (((tex == true) && (path == true) && (bone_case == 8) && (instanced == false))){
																																																return vertex_pos_norm_tex_path_8bones_noinst();
																																															}
																																															else{
																																																if (((tex == true) && (path == true) && (bone_case == 8) && (instanced == true))){
																																																	return vertex_pos_norm_tex_path_8bones_compact4x3inst();
																																																}
																																																else{
																																																	if (((tex == true) && (path == true) && (bone_case == 12) && (instanced == false))){
																																																		return vertex_pos_norm_tex_path_12bones_noinst();
																																																	}
																																																	else{
																																																		if (((tex == true) && (path == true) && (bone_case == 12) && (instanced == true))){
																																																			return vertex_pos_norm_tex_path_12bones_compact4x3inst();
																																																		}
																																																		else{
																																																			if (((tex == true) && (path == true) && (bone_case == 16) && (instanced == false))){
																																																				return vertex_pos_norm_tex_path_16bones_noinst();
																																																			}
																																																			else{
																																																				if (((tex == true) && (path == true) && (bone_case == 16) && (instanced == true))){
																																																					return vertex_pos_norm_tex_path_16bones_compact4x3inst();
																																																				}
																																																				else{
																																																					if (((tex == true) && (path == true) && (bone_case == 20) && (instanced == false))){
																																																						return vertex_pos_norm_tex_path_20bones_noinst();
																																																					}
																																																					else{
																																																						if (((tex == true) && (path == true) && (bone_case == 20) && (instanced == true))){
																																																							return vertex_pos_norm_tex_path_20bones_compact4x3inst();
																																																						}
																																																						else{
																																																							if (((tex == true) && (path == true) && (bone_case == 24) && (instanced == false))){
																																																								return vertex_pos_norm_tex_path_24bones_noinst();
																																																							}
																																																							else{
																																																								if (((tex == true) && (path == true) && (bone_case == 24) && (instanced == true))){
																																																									return vertex_pos_norm_tex_path_24bones_compact4x3inst();
																																																								}
																																																							}
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	fprintf(stderr, "ERROR: cannot find suitable shader for configuration N:%d, T:%d, P:%d, B:%d (%d)\n", normals, tex, path, bones, bone_case);
	return 0;
}

