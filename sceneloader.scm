(define additional-uniform-handlers '())
(define (register-scene-uniform-handlers . handlers)
  (set! additional-uniform-handlers handlers))

(define create-drawelement-for-scene #f)
(define scene-drawelements '())
(define (add-drawelement-to-scene de)
  (set! scene-drawelements (cons de scene-drawelements)))

(define (load-scene)
  (if (eq? (cmdline filetype) 'obj)
      (setup-scene (cmdline model))
      (load (cmdline scene))))

(define (setup-scene mainfile)
  (define (create-drawelement name mesh material)
    (let* ((shader (if (cmdline hemi)
                       (if (material-has-textures? material)
                           (find-shader "diffuse-hemi+spot+tex")
                           (find-shader "diffuse-hemi+spot"))
                       (if (material-has-textures? material)
                           (find-shader "diffuse-dl+tex")
                           (find-shader "diffuse-dl"))))
           (de (make-drawelement name mesh shader material)))
      (prepend-uniform-handler de 'default-matrix-uniform-handler)
      (prepend-uniform-handler de 'default-material-uniform-handler)
      (for-each (lambda (handler) (prepend-uniform-handler de handler))
		additional-uniform-handlers)
      (set! scene-drawelements (cons de scene-drawelements))))
  
  (set! create-drawelement-for-scene create-drawelement)
  
  (let ((fallback-material (make-material "fallback" (make-vec 1 0 0 1) (make-vec 1 0 0 1) (make-vec 0 0 0 1))))
    (receive (min max) (load-objfile-and-create-objects-with-separate-vbos mainfile mainfile create-drawelement fallback-material)
      (let* ((near 1)
             (far 1)
             (diam (vec-sub max min))
             (diam/2 (vec-div-by-scalar diam 2))
             (center (vec-add min diam/2))
             (distance (vec-length diam))
             (pos (vec-add center (make-vec 0 0 distance))))
        (while (> near (/ distance 100))
          (set! near (/ near 10)))
        (while (< far (* distance 2))
          (set! far (* far 2)))
        (let ((cam (make-perspective-camera "cam" pos (make-vec 0 0 -1) (make-vec 0 1 0) 35 (/ x-res y-res) near far)))
          (use-camera cam))
        (set-move-factor! (/ distance 40)))))
)

(define (add-model-to-scene filename object-name material)
  (load-objfile-and-create-objects-with-separate-vbos filename object-name create-drawelement-for-scene material))
  
  
	;(let ((cam (make-perspective-camera "cam" (make-vec -1242 163 -69) (make-vec 1 0 0) (make-vec 0 1 0) 35 (/ x-res y-res) near far)))  ;near ;far)))
