#line 2 "stock-shader.c.in"
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "stock-shader.h"

void init_stockshader_fragments(struct stockshader_fragments *ssf) {
	ssf->inputs = ssf->vertex_sources = ssf->fragment_sources = ssf->uniforms = 0;
}

void free_stockshader_fragments(struct stockshader_fragments *ssf) {
	struct stockshader_stringlist *data[4] = { ssf->inputs, 
	                                           ssf->vertex_sources, 
									           ssf->fragment_sources, 
									           ssf->uniforms };
	for (int i = 0; i < 4; ++i)
		for (struct stockshader_stringlist *run = data[i]; run; ) {
			if (run->malloced)
				free(run->data);
			struct stockshader_stringlist *old = run;
			run = run->next;
			free(old);
		}
}

static void stringlist_pushback(struct stockshader_stringlist **list, const char *str) {
	struct stockshader_stringlist *new_entry = malloc(sizeof(struct stockshader_stringlist));
	new_entry->next = 0;
	new_entry->malloced = true;
	new_entry->data = strdup(str);
	if (*list == 0)
		*list = new_entry;
	else {
		struct stockshader_stringlist *run = *list;
		while (run->next)
			run = run->next;
		run->next = new_entry;
	}
}

static int stringlist_length(struct stockshader_stringlist *list) {
	int i = 0;
	while (list)
		i++, list = list->next;
	return i;
}

void stockshader_add_input(struct stockshader_fragments *ssf, const char *name)    { stringlist_pushback(&ssf->inputs, name); }
void stockshader_add_vsource(struct stockshader_fragments *ssf, const char *code)  { stringlist_pushback(&ssf->vertex_sources, code); };
void stockshader_add_fsource(struct stockshader_fragments *ssf, const char *code)  { stringlist_pushback(&ssf->fragment_sources, code); };
void stockshader_add_uniform(struct stockshader_fragments *ssf, const char *name)  { stringlist_pushback(&ssf->uniforms, name); };
int stockshader_inputs(struct stockshader_fragments *ssf)   { return stringlist_length(ssf->inputs); }
int stockshader_vsources(struct stockshader_fragments *ssf) { return stringlist_length(ssf->vertex_sources); }
int stockshader_fsources(struct stockshader_fragments *ssf) { return stringlist_length(ssf->fragment_sources); }
int stockshader_uniforms(struct stockshader_fragments *ssf) { return stringlist_length(ssf->uniforms); }

enum settings {
	modulate_texture_by_color = 01,
	ignore_ambient = 02,
};

enum settings settings = modulate_texture_by_color | ignore_ambient;

bool ign_amb() {
	return settings & ignore_ambient;
}

// %%%

const char* vertex_pos_norm_notex() {
	return
		shader{
			#version 420 core
			in vec3 in_pos;
			in vec3 in_norm;
	
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			
			out vec4 pos_wc;
			out vec3 norm_wc;

			void main() {
				pos_wc = model * vec4(in_pos, 1.0);
				norm_wc = (model * vec4(in_norm,0.0)).xyz; // assuming model is not strange.
				gl_Position = proj * view * pos_wc;
			}
		}shader;
}

const char* vertex_pos_norm_tex() {
	return
		shader{
			#version 420 core
			in vec3 in_pos;
			in vec3 in_norm;
			in vec2 in_tc;
	
			uniform mat4 proj;
			uniform mat4 view;
			uniform mat4 model;
			
			out vec4 pos_wc;
			out vec3 norm_wc;
			out vec2 tc;

			void main() {
				pos_wc = model * vec4(in_pos, 1.0);
				norm_wc = (model * vec4(in_norm,0.0)).xyz; // assuming model is not strange.
				tc = in_tc;
				gl_Position = proj * view * pos_wc;
			}
		}shader;
}

const char* fragment_part_no_no_no_no(const char ***u) {
	static const char *uniforms[] = {
		"ambient_color",
		"diffuse_color",
		"specular_color",
		"shininess",
		0
	};
	*u = uniforms;
	return
		shader{
			#version 420 core
			uniform vec4 ambient_color;
			uniform vec4 diffuse_color;
			uniform vec4 specular_color;
			uniform float shininess;

			float mask() {
				return 1.0;
			}

			vec4 ambient() {
				return ambient_color;
			}

			vec4 diffuse() {
				return diffuse_color;
			}

			vec4 specular() {
				return specular_color;
			}
		}shader;
}

const char* fragment_part_no_diff_no_no(const char ***u) {
	static const char *uniforms[] = {
		"ambient_color",
		"diffuse_color",
		"specular_color",
		"shininess",
		"diffuse_tex",
		0
	};
	*u = uniforms;
	return
		shader{
			#version 420 core
			uniform vec4 ambient_color;
			uniform vec4 diffuse_color;
			uniform vec4 specular_color;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			in vec2 tc;

			float mask() {
				return 1.0;
			}

			vec4 ambient() {
				return ambient_color;
			}

			vec4 diffuse() {
				return diffuse_color * texture(diffuse_tex, tc);
			}

			vec4 specular() {
				return specular_color;
			}
		}shader;
}

const char* fragment_part_no_diff_no_mask(const char ***u) {
	static const char *uniforms[] = {
		"ambient_color",
		"diffuse_color",
		"specular_color",
		"shininess",
		"diffuse_tex",
		"mask_tex",
		0
	};
	*u = uniforms;
	return
		shader{
			#version 420 core
			uniform vec4 ambient_color;
			uniform vec4 diffuse_color;
			uniform vec4 specular_color;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform sampler2D mask_tex;
			in vec2 tc;

			float mask() {
				return texture(mask_tex, tc).r;
			}

			vec4 ambient() {
				return ambient_color;
			}

			vec4 diffuse() {
				return diffuse_color * texture(diffuse_tex, tc);
			}

			vec4 specular() {
				return specular_color;
			}
		}shader;
}

const char* dummy_fragment_shader() {
	return
		shader{
			// looks like the driver is just pasting the src files together... m( #version 150 core
			in vec4 pos_wc;
			in vec3 norm_wc;

			vec4 ambient();
			vec4 diffuse();
			vec4 specular();
			float mask();

			out vec4 out_col;
			uniform mat4 view;

			float headmounted_spot(vec3 spot_dir, vec3 l) {
				float theta = acos(dot(spot_dir, -l));
				float spot_cutoff = 35.0 * 3.1415 / 180.0;
				float factor = 1.0 - smoothstep(spot_cutoff*.5, spot_cutoff, theta);
				return max(factor, 0.0);
			}

			void main() {
				if (mask() < 0.2)
					discard;
				vec3 n = normalize(mat3x3(transpose(inverse(view))) * norm_wc);
				vec4 pos_ec = view * pos_wc;
				vec3 l = -normalize(pos_ec.xyz);
				vec3 v = -normalize(pos_ec.xyz);
				float spot_factor = headmounted_spot(vec3(0,0,-1), l);
				
				float n_dot_l = max(dot(n, l), 0);
				out_col = vec4(diffuse().rgb * spot_factor * n_dot_l, 1.0);
				
				vec3 h = normalize(l+v);
				float i = pow(clamp(dot(h, n), 0, 1), shininess);

			}
		}shader;
}

// %%%

void add_stock_vertex_shader(struct stockshader_fragments *ssf, bool use_normals, bool use_texcoords) {
	const char *src = 0;
	if      ( use_normals && !use_texcoords) src = vertex_pos_norm_notex();
	else if ( use_normals &&  use_texcoords) src = vertex_pos_norm_tex();

	stockshader_add_input(ssf, "in_pos");
	if (use_normals) stockshader_add_input(ssf, "in_norm");
	if (use_texcoords) stockshader_add_input(ssf, "in_tc");
	stockshader_add_uniform(ssf, "proj");
	stockshader_add_uniform(ssf, "view");
	stockshader_add_uniform(ssf, "model");
	stockshader_add_vsource(ssf, src);
}

void add_stock_fragment_shader_part(struct stockshader_fragments *ssf, bool use_normals, bool ambient_tex, bool diffuse_tex, bool specular_tex, bool mask_tex) {
	bool use_tc = false;
	if (ambient_tex || diffuse_tex || specular_tex || mask_tex)
		use_tc = true;
	if (ign_amb())
		ambient_tex = false;

	add_stock_vertex_shader(ssf, use_normals, use_tc);

	printf("making shader:   A:%d  D:%d  S:%d  M:%d\n", ambient_tex, diffuse_tex, specular_tex, mask_tex);

	const char *src = 0;
	const char **uniforms = 0;
	if      (  !ambient_tex  &&  !diffuse_tex  &&  !specular_tex  &&  !mask_tex)    src = fragment_part_no_no_no_no(&uniforms);
	else if (  !ambient_tex  &&   diffuse_tex  &&  !specular_tex  &&  !mask_tex)    src = fragment_part_no_diff_no_no(&uniforms);
	else if (  !ambient_tex  &&   diffuse_tex  &&  !specular_tex  &&   mask_tex)    src = fragment_part_no_diff_no_mask(&uniforms);
// 	else if (   ambient_tex  &&  !diffuse_tex  &&  !specular_tex  &&  !mask_tex)    src = fragment_part_no_no_no_no(&uniforms);
// 	else if (   ambient_tex  &&   diffuse_tex  &&  !specular_tex  &&  !mask_tex)    src = fragment_part_no_diff_no_no(&uniforms);
// 	else if (   ambient_tex  &&   diffuse_tex  &&  !specular_tex  &&   mask_tex)    src = fragment_part_no_diff_no_mask(&uniforms);
	else src = fragment_part_no_no_no_no(&uniforms);

	for (int i = 0; uniforms[i]; ++i)
		stockshader_add_uniform(ssf, uniforms[i]);
	stockshader_add_fsource(ssf, src);
}

void stock_shader(struct stockshader_fragments *ssf, bool ambient_tex, bool diffuse_tex, bool specular_tex, bool mask_tex) {
	add_stock_fragment_shader_part(ssf, true, ambient_tex, diffuse_tex, specular_tex, mask_tex);

	stockshader_add_fsource(ssf, dummy_fragment_shader());
}

void populate_shader_with_fragments(shader_ref shader, struct stockshader_fragments *ssf) {
	int i = 0;
	for (struct stockshader_stringlist *run = ssf->inputs; run; run = run->next)
		add_shader_input(shader, run->data, i++);
	for (struct stockshader_stringlist *run = ssf->vertex_sources; run; run = run->next)
		add_vertex_source(shader, run->data);
	for (struct stockshader_stringlist *run = ssf->fragment_sources; run; run = run->next)
		add_fragment_source(shader, run->data);
	for (struct stockshader_stringlist *run = ssf->uniforms; run; run = run->next)
		add_shader_uniform(shader, run->data);
}

