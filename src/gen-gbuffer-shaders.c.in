// Generated by CGen
#include <stdbool.h>
#include <stdio.h>
const char* gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			float mask (){
				return 1;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return vec4(0);
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return ambient_color;
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_no (const char ***u){
	static const char* uniforms[] = { "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return vec4(0);
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return diffuse_color;
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_no (const char ***u){
	static const char* uniforms[] = { "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return vec4(0);
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_col (const char ***u){
	static const char* uniforms[] = { "specular_color", "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return specular_color;
			}

		}shader;
}

const char* gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_ct (const char ***u){
	static const char* uniforms[] = { "specular_tex", "specular_color", "diffuse_tex", "diffuse_color", "ambient_tex", "ambient_color", "mask_tex", 0 };
	*u = uniforms;
	return 
		shader{
			 #version 430 core  
			in vec2 tc;
			uniform float shininess;
			uniform sampler2D specular_tex;
			uniform vec4 specular_color;
			uniform sampler2D diffuse_tex;
			uniform vec4 diffuse_color;
			uniform sampler2D ambient_tex;
			uniform vec4 ambient_color;
			uniform sampler2D mask_tex;
			float mask (){
				return texture(mask_tex, tc).r;
			}

			vec4 ambient (){
				return (ambient_color * texture(ambient_tex, tc));
			}

			vec4 diffuse (){
				return (diffuse_color * texture(diffuse_tex, tc));
			}

			vec4 specular (){
				return (specular_color * texture(specular_tex, tc));
			}

		}shader;
}

const char* select_gbuffer_fragment_part (bool mask_tex, bool amb_col, bool amb_tex, bool diff_col, bool diff_tex, bool spec_col, bool spec_tex, const char ***u){
	if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
		return gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_no(u);
	}
	else{
		if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
			return gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_col(u);
		}
		else{
			if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
				return gbuffer_fragment_part_mask_no__amb_no__diff_no__spec_ct(u);
			}
			else{
				if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
					return gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_no(u);
				}
				else{
					if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
						return gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_col(u);
					}
					else{
						if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
							return gbuffer_fragment_part_mask_no__amb_no__diff_col__spec_ct(u);
						}
						else{
							if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
								return gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_no(u);
							}
							else{
								if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
									return gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_col(u);
								}
								else{
									if (((mask_tex == false) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
										return gbuffer_fragment_part_mask_no__amb_no__diff_ct__spec_ct(u);
									}
									else{
										if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
											return gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_no(u);
										}
										else{
											if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
												return gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_col(u);
											}
											else{
												if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
													return gbuffer_fragment_part_mask_no__amb_col__diff_no__spec_ct(u);
												}
												else{
													if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
														return gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_no(u);
													}
													else{
														if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
															return gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_col(u);
														}
														else{
															if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																return gbuffer_fragment_part_mask_no__amb_col__diff_col__spec_ct(u);
															}
															else{
																if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
																	return gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_no(u);
																}
																else{
																	if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
																		return gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_col(u);
																	}
																	else{
																		if (((mask_tex == false) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
																			return gbuffer_fragment_part_mask_no__amb_col__diff_ct__spec_ct(u);
																		}
																		else{
																			if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																				return gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_no(u);
																			}
																			else{
																				if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																					return gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_col(u);
																				}
																				else{
																					if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																						return gbuffer_fragment_part_mask_no__amb_ct__diff_no__spec_ct(u);
																					}
																					else{
																						if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																							return gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_no(u);
																						}
																						else{
																							if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																								return gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_col(u);
																							}
																							else{
																								if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																									return gbuffer_fragment_part_mask_no__amb_ct__diff_col__spec_ct(u);
																								}
																								else{
																									if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
																										return gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_no(u);
																									}
																									else{
																										if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
																											return gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_col(u);
																										}
																										else{
																											if (((mask_tex == false) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
																												return gbuffer_fragment_part_mask_no__amb_ct__diff_ct__spec_ct(u);
																											}
																											else{
																												if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																													return gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_no(u);
																												}
																												else{
																													if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																														return gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_col(u);
																													}
																													else{
																														if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																															return gbuffer_fragment_part_mask_tex__amb_no__diff_no__spec_ct(u);
																														}
																														else{
																															if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																																return gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_no(u);
																															}
																															else{
																																if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																																	return gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_col(u);
																																}
																																else{
																																	if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																																		return gbuffer_fragment_part_mask_tex__amb_no__diff_col__spec_ct(u);
																																	}
																																	else{
																																		if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
																																			return gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_no(u);
																																		}
																																		else{
																																			if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
																																				return gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_col(u);
																																			}
																																			else{
																																				if (((mask_tex == true) && (amb_col == false) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
																																					return gbuffer_fragment_part_mask_tex__amb_no__diff_ct__spec_ct(u);
																																				}
																																				else{
																																					if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																																						return gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_no(u);
																																					}
																																					else{
																																						if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																																							return gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_col(u);
																																						}
																																						else{
																																							if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																																								return gbuffer_fragment_part_mask_tex__amb_col__diff_no__spec_ct(u);
																																							}
																																							else{
																																								if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																																									return gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_no(u);
																																								}
																																								else{
																																									if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																																										return gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_col(u);
																																									}
																																									else{
																																										if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																																											return gbuffer_fragment_part_mask_tex__amb_col__diff_col__spec_ct(u);
																																										}
																																										else{
																																											if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
																																												return gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_no(u);
																																											}
																																											else{
																																												if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
																																													return gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_col(u);
																																												}
																																												else{
																																													if (((mask_tex == true) && (amb_col == true) && (amb_tex == false) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
																																														return gbuffer_fragment_part_mask_tex__amb_col__diff_ct__spec_ct(u);
																																													}
																																													else{
																																														if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																																															return gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_no(u);
																																														}
																																														else{
																																															if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																																																return gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_col(u);
																																															}
																																															else{
																																																if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == false) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																																																	return gbuffer_fragment_part_mask_tex__amb_ct__diff_no__spec_ct(u);
																																																}
																																																else{
																																																	if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == false) && (spec_tex == false))){
																																																		return gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_no(u);
																																																	}
																																																	else{
																																																		if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == false))){
																																																			return gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_col(u);
																																																		}
																																																		else{
																																																			if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == false) && (spec_col == true) && (spec_tex == true))){
																																																				return gbuffer_fragment_part_mask_tex__amb_ct__diff_col__spec_ct(u);
																																																			}
																																																			else{
																																																				if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == false) && (spec_tex == false))){
																																																					return gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_no(u);
																																																				}
																																																				else{
																																																					if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == false))){
																																																						return gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_col(u);
																																																					}
																																																					else{
																																																						if (((mask_tex == true) && (amb_col == true) && (amb_tex == true) && (diff_col == true) && (diff_tex == true) && (spec_col == true) && (spec_tex == true))){
																																																							return gbuffer_fragment_part_mask_tex__amb_ct__diff_ct__spec_ct(u);
																																																						}
																																																					}
																																																				}
																																																			}
																																																		}
																																																	}
																																																}
																																															}
																																														}
																																													}
																																												}
																																											}
																																										}
																																									}
																																								}
																																							}
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	fprintf(stderr, "ERROR: cannot find suitable shader for configuration M-tex:%d, A-col:%d, A-tex:%d, D-col:%d, D-tex:%d, S-col:%d, S-tex:%d\n", mask_tex, amb_col, amb_tex, diff_col, diff_tex, spec_col, spec_tex);
	return 0;
}

// Generatey by CGen
